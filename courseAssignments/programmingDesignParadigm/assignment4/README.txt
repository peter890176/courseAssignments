
Project Name:
Assignment 4

Description: 
This is an image processing application. Our user interface supports interactions via the text-based commands and text files. In addition to meet the explicitly required assignment instructions, we've implemented additional functionalities. These include the ability to convert between different file formats (e.g., .ppm to .jpg, .ppm to .png, .jpg to .png, etc.) and running with script files, which can include other script-file running commands. We've also supported error handling for various exceptions, such as command typos and file path not found errors. The project consists of two interfaces, Controller and ImageModel, and two classes, ImageUtil and Main. The Controller interface serves a single function, which is to translate user input into actions for the application. The ImageModel interface provides input/output methods for reading/writing images and encompasses all the image processing operations (e.g., red-component, flip-Vertical, blur, etc.). The ImageUtil class implements both the Controller and ImageModel interfaces. It also contains several private attributes and functions used to convert images into a unified ArrayList<ArrayList<ArrayList<Integer>>> format, supporting the image storage and output. The Main class has the main() function, responsible for listening to user input via the console and passing commands to other classes for execution.

Example image:
The example images and the runfiles were included in the folder(res/). All the images were generated by the JPG_Example_Original.jpg image to demonstrate the assignment required operations results, using the command lines in the runFile.txt and runFile2.txt. You can simply run the main(), and then key in the command in the console:
run res/runFile.txt
It will generate same results as our provided.

Quick Start Guide:
To start the application, follow these steps:

0. Execute the main() function.

1a. For single-line input, enter commands directly in the console.

1b. For file-based input, enter the command "run FilePath" in the console, and the application will automatically read and execute the commands line by line. For example:
run res/runFile.txt
This command will using the command lines in runFile.txt line by line until it touch the end of file.

2. Before performing operations on images, you need to load them. For example using the single-line input command in the console: 
load res/JPG_Example_Original.jpg j0
This command will generate a image which is named j0, and uses its name map to a image which is stored in or Hashmap structure.

3. To execute operations, enter commands in the console. For example:
red-component j0 JPG_RED

4. After completing the operations, you can save the specified image to a specified path in a specific file format (e.g., .ppm, .jpg, .png or .jpeg). For example:
save res/JPG_RED.jpg JPG_RED

5. If you want to stop the application, you could enter "exit" to stop the applictaion. For example:
exit

References:
We use "JPG_Example_Original.jpg" as an example for demonstrating operations.
Photograph by Yue Wen Peter Li(one of the team member student), taken on 2020.07.20 at Taipei, Taiwan.

We also use another source image for testing demonstrations. These images are derived from "PNG_image.png", which was freely provided for the developers to use or test. Source: Sample Videos. (URL: https://sample-videos.com/download-sample-png-image.php)

Note:
The "res2" folder contains images used for testing.