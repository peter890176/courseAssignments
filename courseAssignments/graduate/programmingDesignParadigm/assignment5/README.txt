Description: 
This is an image processing application. Our user interface supports interactions via the text-based commands and text files. In addition to meet the explicitly required assignment instructions, we've implemented additional functionalities. These include the ability to convert between different file formats (e.g., .ppm to .jpg, .ppm to .png, .jpg to .png, etc.) and running with script files, which can include other script-file running commands. We've also supported error handling for various exceptions, such as command typos and file path not found errors. The project consists of two interfaces, Controller and ImageModel, and three classes, ImageUtil, ImageController and Main. The Controller interface serves a single function, which is to translate user input into actions for the application. The ImageModel interface serves the input/output calls from controller for reading/writing images and encompasses all the image processing operations (e.g., red-component, flip-Vertical, blur, etc.). The ImageUtil class implements the ImageModel interfaces. It also contains several private attributes and functions used to convert images into a unified ArrayList<ArrayList<ArrayList<Integer>>> format, supporting the image storage and output. The Main class has the main() function, responsible for listening to user input via the console and passing commands to the controller for execution.


Changes and justifications: 
1. We modified the original structure where the controller and model were combined. The Model and Controller classes are independent of each other to conform to the MVC architecture. Now, it is easy to identify which is the model and which is the controller.
2.As the requirements of Assignment 5, we have added the following functionalities and provided corresponding unit tests:
histogram image-name dest-image-name
compress percentage image-name dest-image-name
value-component image-name dest-image-name split percentage
luma-component image-name dest-image-name split percentage
intensity-component image-name dest-image-name split percentage
blur image-name dest-image-name split percentage
sharpen image-name dest-image-name split percentage
sepia image-name dest-image-name split percentage
color-correct image-name dest-image-name
color-correct image-name dest-image-name split percentage
levels-adjust b m w image-name dest-image-name
levels-adjust b m w image-name dest-image-name split percentage
3.Supports the execution through the .jar file format in command line terminal and provides optional functionality with '-file name-of-script.txt'
4.Error handling for script command has been modified to prevent program crashes and provide hints.
5.A list of all commands was provided in USEME.txt
6.Class diagram is updated


Example script and execution way for .jar:
We have included two example scripts in "res" folder for .jar to run: (a)example_script (b)example_script_all_functions.
The (a) script could generate the images that conform the assignment's requirements.
The (b) script contains all the features that our program could support.
For example, you can run the following commands in the terminal:
java -jar assignment5.jar -file example_script.txt
java -jar assignment5.jar -file example_script_all_functions.txt

Example image(This part is the same as Assignment 4):
The example images were included in the folder(res/). All the images were generated by the JPG_Example_Original.jpg image to demonstrate the assignment required operations results, using the command lines in the runFile.txt and runFile2.txt. You can simply run the main(), and then key in the command in the console:
run res/runFile.txt
It will generate same results as our provided.


Quick Start Guide(This part is the same as Assignment 4):
To start the application, follow these steps:

0. Execute the main() function.

1a. For single-line input, enter commands directly in the console.

1b. For file-based input, enter the command "run FilePath" in the console, and the application will automatically read and execute the commands line by line. For example:
run res/runFile.txt
This command will using the command lines in runFile.txt line by line until it touch the end of file.

2. Before performing operations on images, you need to load them. For example using the single-line input command in the console: 
load res/JPG_Example_Original.jpg j0
This command will generate a image which is named j0, and uses its name map to a image which is stored in or Hashmap structure.

3. To execute operations, enter commands in the console. For example:
red-component j0 JPG_RED

4. After completing the operations, you can save the specified image to a specified path in a specific file format (e.g., .ppm, .jpg, .png or .jpeg). For example:
save res/JPG_RED.jpg JPG_RED

5. If you want to stop the application, you could enter "exit" to stop the applictaion. For example:
exit


References(This part is thesame as Assignment 4):
We use "JPG_Example_Original.jpg" as an example for demonstrating operations.
Photograph by Yue Wen Peter Li(one of the team member student), taken on 2020.07.20 at Taipei, Taiwan.

We also use another source image for testing demonstrations. These images are derived from "PNG_image.png", which was freely provided for the developers to use or test. Source: Sample Videos. (URL: https://sample-videos.com/download-sample-png-image.php)